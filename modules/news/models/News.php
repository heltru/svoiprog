<?php

namespace app\modules\news\models;

use app\modules\url\models\Url;
use backend\models\appclass\AttImg;
use Yii;

/**
 * This is the model class for table "news".
 *
 * @property integer $id
 * @property string $name
 * @property string $date_public
 * @property string $type
 * @property integer $first
 * @property integer $status
 * @property integer $text
 * @property integer $ord
 * @property integer $news_cat_id
 *
 */
class News extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */

    const T_CMP = 2;
    const T_CMI = 1;
    const T_OWN = 0;

    const ST_OK = 0;
    const ST_NO = 1;

    const F_YES = 0;
    const F_NO = 1;


    public static  $arrTxtFirst = [self::F_YES => 'На главной',self::F_NO =>'Нет'];
    public static  $arrTxtStatus = [self::ST_OK => 'Включен',self::ST_NO =>'Выключен'];
    public static  $arrTxtType = [ self::T_CMI => 'Сми', self::T_OWN =>'Общие', self::T_CMP =>'О компании'];

    public $mRu =  [ 'февраля','января','февраля','марта','апреля','мая','июня','июля',
        'августа','сентября','октября','ноября','декабря'];

    public static function tableName()
    {
        return 'news';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'date_public', 'type'], 'required'],
            [['date_public'], 'safe'],
            [['text'], 'string', 'max' => 9000],
            [['first','status','type','ord','news_cat_id'], 'integer'],
            [['name'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'date_public' => 'Дата публикации',
            'type' => 'Тип новости',
            'first' => 'На главной',
            'status' => 'Статус',
            'text' => 'Превью',
            'news_cat_id' => 'Категория',

        ];
    }

    public function getUrl_r(){
        return $this->hasOne( Url::class, ['identity' => 'id'])->where(['controller' => \app\modules\news\service\News::$url_controller,
            'action'=>'view'])->andWhere(['redirect'=>0]);
    }

    public function getNewsCat_r(){
        return $this->hasOne( NewsCat::class, ['id'=>'news_cat_id' ]);
    }

    public function getNewsBlocks_r()
    {
        return $this->hasMany( NewsBlock::class, ['news_id' => 'id'])->orderBy('ord');

    }



    public function beforeSave($insert)
    {
        $phpdate = strtotime( $this->date_public );
        $mysqldate = date( 'Y-m-d H:i:s', $phpdate );
        $this->date_public = $mysqldate;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        AttImg::delAllRef($this->id,'news');
        Url::deleteAll(['controller'=> 'news','action'=>'view' ,'identity'=>$this->id]);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public static function preseachGrid($data){


        $i = 0; $fl = false; $itemsSort = [];
        $bl = [];
        foreach ($data as $item){
            $i++;
            if ($i == 1 ){
                $bl['big'] = $item;
            } else {
                $bl['sm'][] = $item;
            }
            if ($i == 4){
                $i = 0;
                if ($fl) $bl = array_reverse($bl);
                $fl = ! $fl;
                $itemsSort[] = $bl;
                $bl = [];
            }
        }

        if (count($bl))
            $itemsSort[] = $bl;
        return $itemsSort;
    }

    public function getRusMount(){
        $date = \DateTime::createFromFormat('Y-m-d H:i:s', $this->date_public)->format('d.m.Y');
        $arr = explode('.',$date);

        return  $this->mRu[(int)$arr[1]] ;

    }

}
