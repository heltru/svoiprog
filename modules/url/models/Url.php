<?php


namespace app\modules\url\models;

use app\modules\domain\models\Domain;
use app\modules\textpage\models\Textpage;

use Yii;



/**
 * This is the model class for table "url".
 *
 * @property integer $id
 * @property string $href
 * @property string $real_canonical
 * @property string $title
 * @property string $h1
 * @property string $description_meta
 * @property string $redirect
 * @property string $controller
 * @property string $crs
 * @property string $domain_id
 * @property string $action
 * @property string $identity
 * @property string $pagination
 * @property string $keywords
 * @property string $dynamic
 * @property string $last_check
 *
 */
class Url extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */

    const form_path = '@app/modules/url/views/backend/url/_form';

    const ENT_PRODUCT = 'product';
    const ENT_ACTIONS = 'actions';

    const P_OK = 1;
    const P_NO = 0;


    public $old_href;

    public $preHref;
    public $rawHref;
    public $clrHref;
    public static $deph;

    public $need_redirect=1;

    public static  $entTxt = [

        'product' => 'Продукты',
        'catalog' => 'Категории',
        'action' => 'Акции',
        'blog' => 'Блог',
        'filter' => 'Фильтры',
        'brand' => 'Бренды',
        'blogcat' => 'Категории блога',
        'brand-cat' => 'Агрегатор брендов',
        'pagination' => 'Пагинация',
        'compare' => 'Сравнение', //compare


    ];

    public function init()
    {
        $this->setScenario('validHref');
        parent::init(); // TODO: Change the autogenerated stub
    }

    public static function find()
    {
        return new UrlQuery(get_called_class());
    }

    public static function tableName()
    {
        return 'url';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['href'] , 'checkHrefFormat' ,'on'=>['ajaxValid']],
            [['href','h1'] , 'required' ,'on'=>['ajaxValid']],
            [['href'] , 'checkUnicOldRecrod' ,'on'=>'ajaxValid'],
            [['href'], 'unique', 'on'=>'validHref'],
            [[/*'href',*/'h1'], 'required', 'on'=>'validHref' ],
            [['href'],'default', 'value' => '', 'on'=>'validMainPage' ], // of not mine page

            [['redirect',  'crs', 'domain_id' ,'public','identity',
                'pagination','dynamic','condition_id'], 'integer'],
            [[ 'real_canonical', 'title' ,'keywords'], 'string', 'max' => 255],
            [['href','h1' ], 'string', 'max' => 1000],
            [['controller','action'   ], 'string', 'max' => 45],
            [['redirect','condition_id'], 'default', 'value'=> 0],
            [['description_meta'], 'string'],
            [['description_meta'], 'default','value'=> ''],
            //     [['last_mod'],'default', 'value'=> '00:00:00 00:00:00'],

            [['last_mod','preHref','rawHref','old_href','need_redirect'], 'safe'],

            [['module'], 'string'],

            //   ['href', 'checkHrefFormat' ]//'match', 'pattern' => '/~/~$/' ]
        ];
    }

    public function scenarios()
    {
        return [

            'ajaxValid'=>[
                'href','old_href','h1','preHref'
            ],
            'validHref' => [
                'href','redirect',  'domain_id' ,'action' ,
                'real_canonical', 'title','h1','description_meta' ,
                'preHref','last_mod','pagination','keywords','public','dynamic',
                'condition_id','controller' ,'need_redirect'
            ],
            'validMainPage' => [
                'href','redirect',  'domain_id' ,
                'action' ,
                'real_canonical', 'title','h1','description_meta' ,
                'preHref','last_mod','pagination','keywords'
            ],
            'newRedirect' => [
                'href'
            ],
            'copy'=>[
                'href','redirect',  'domain_id' ,'action' ,
                'real_canonical', 'title','h1','description_meta' ,
                'preHref','last_mod','pagination','keywords','public'
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'href' => 'Url',
            'real_canonical' => 'Real Canonical',
            'title' => 'Title',
            'h1' => 'H1',
            'description_meta' => 'Description Meta',
            'controller' => 'Тип сущности',
            'crs'=> 'Hash url',
            'domain_id'=> 'Домен',
            'last_mod'=> 'Дата публикации (last modif)',
            'public'=> 'Public',
            'preHref'=> 'Приставка к Url',
            'rawHref'=> 'href ',
            'keywords' => 'Keywords',
            'dynamic'=>'Динамический',
            'condition_id'=>'Условие активации',
            'last_check' => 'Последняя проверка',
            'need_redirect' => 'Проверить редирект'


        ];
    }

    public static function checkRedirect($urlM){

        self::$deph ++;


        if($urlM->redirect == 0 || self::$deph > 5){
            return $urlM;
        }

        $original = clone $urlM;
        $urlM = Url::find()->where(['id'=>$urlM->redirect])->one();

        if ($urlM !== null){
            return self::checkRedirect($urlM);
        }
        return $original;
    }

    public static function checkRedirectList($urlM,$res){
        self::$deph ++;



        if($urlM->redirect == 0 || self::$deph > 10){
        //    $res[] = $urlM;
            return $res;
        }



        $urlM = Url::find()->where(['id'=>$urlM->redirect])->one();


        if ($urlM !== null){

            $res[] = $urlM;

            return  self::checkRedirectList($urlM,$res);



        }

        return $res;
    }

    public static function setHeaderLastMod($LastModified_unix){ // время последнего изменения страницы

        $LastModified = gmdate("D, d M Y H:i:s \G\M\T", $LastModified_unix);
        $IfModifiedSince = false;
        if (isset($_ENV['HTTP_IF_MODIFIED_SINCE']))
            $IfModifiedSince = strtotime(substr($_ENV['HTTP_IF_MODIFIED_SINCE'], 5));
        if (isset($_SERVER['HTTP_IF_MODIFIED_SINCE']))
            $IfModifiedSince = strtotime(substr($_SERVER['HTTP_IF_MODIFIED_SINCE'], 5));
        if ($IfModifiedSince && $IfModifiedSince >= $LastModified_unix) {
            header($_SERVER['SERVER_PROTOCOL'] . ' 304 Not Modified');
            exit;
        }
        header('Last-Modified: '. $LastModified);
    }

    public function getRedirect_r(){
        return $this->hasOne(  Url::class, ['id' => 'redirect']);
    }

    public function getUrlDomain_r(){
        return $this->hasMany(UrlDomain::class,['url_id'=>'id']);
    }

    public function checkUnicOldRecrod($attribute, $params){
        $url = null;

        $newHref = $this->href;

        if ($this->preHref) // с приставкой
            $newHref = $this->preHref .'/'. $this->href;



        if ($this->old_href != $newHref /*$this->href*/){
            $url = Url::find()->where(['href'=>$newHref])->one();
        }

        if ($url !== null){
            $this->addError($attribute,'Url уже есть!');
        }
    }

    public function checkHrefFormat($attribute, $params)
    {
        if (strpos($this->href, '/') !== FALSE)
            // no real check at the moment to be sure that the error is triggered
            $this->addError($attribute,'Избегайте символов /');
    }

    public function setPreHref($preHref){
        $this->preHref = $preHref;
    }

    public function setUrlLink($model,$type,$action='view',$module='default'){
        $this->controller = $type;
        $this->identity = $model->id;
        $this->action = $action;
        $this->module = $module;
    }


    public function convertDateToDatetime(){
        //2017-06-27 21:10:40
        //12-04-2017
        //YYYY-MM-DD HH:MM:SS
        $time = new \DateTime('now');
        $today = $time->format('d-m-Y'); //'Y-m-d'

        $today = strtotime( $today );
        $cardSet = strtotime( $this->last_mod );
        if ( $today <= $cardSet ){
            $this->last_mod = date( 'Y-m-d H:i:s', $cardSet );
        } else {
            $this->last_mod = date( 'Y-m-d H:i:s', $today );
        }
      //  var_dump($this->last_mod);exit;
        //var_dump($this->last_mod,$today, strtotime($today) );exit;

       /* if ($this->last_mod){
            $a = ['last_mod'];
            foreach ($a as $item){
                $phpdate = strtotime( $this->{$item} );
                $mysqldate = date( 'Y-m-d H:i:s', $phpdate );
                $this->{$item} = $mysqldate;
            }
        }*/
        //if ($this->la)
        /*if ($changedAttributes['last_mod'] !== $this->last_mod){
                 //update
      $time = new \DateTime('now');
             $today = $time->format('Y-m-d');
             }*/
        // return parent::beforeSave($insert);

    }

    public function addWithPreHref(){
        if ($this->href && $this->preHref){
            $this->clrHref = $this->href;
            $this->href = $this->preHref .'/'. $this->href;
        }
    }


    public function afterFind()
    {
        $this->old_href = $this->href;
        $this->rawHref = $this->href;

        $urlArr = explode('/', $this->href );

        $end = array_pop($urlArr);
        if ( $end ){
            $this->preHref = implode('/',$urlArr);
            $this->href = $end;     
        }

        /*
        $domain = Yii::$app->getModule('domain');
        if ($domain && $domain->isActive() && ! $domain->isDefDomain()){
            //rewrite last_mod
            $domain->rewriteEnt('url',$this);
        }
        */


        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function updateLm($domain_id){
                    
    }
    /*
     * если не задан рел кононоикал
     * то, возращаем url по умолчанию
     * иначе берется БД и дописывается host name
     * $params = [
     *  route,
     *  id
     * ]
     * $sheme
     * */
    public function getRelCononical( Array $params,$sheme =false ){

        if ( ! $this->real_canonical){
            $this->real_canonical =  \yii\helpers\Url::to($params,$sheme);
        } else {
            $this->real_canonical =  Yii::$app->request->hostInfo  . DIRECTORY_SEPARATOR . $this->real_canonical;
        }

        return $this->real_canonical;
    }

    public function beforeSave($insert)
    {
        $this->convertDateToDatetime();
        /*if ($this->isNewRecord){
            if ( $this->real_canonical)
                $this->real_canonical = $this->href;
        }*/
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }



    public static function transliterate($txt){
        $replacement = '-';
        $translator = new Transliteration();
        $translator->standard = Transliteration::GOST_779B;

        $txt = $translator->transliterate($txt);

        $string = preg_replace('/[^a-zA-Z0-9=\s—–-]+/u', '', $txt);
        $string = preg_replace('/[=\s—–-]+/u', $replacement, $string);
        $txt = trim($string, $replacement);
        return $txt;
    }

    public static function syncStatusEnt($ent,$entOn = 0,$entOff = 1,$field='status'){

        $url = $ent->url_rr;

        if (! $ent->isNewRecord && is_object($url)){

            //var_dump($url);exit;
            $url->setScenario('validHref');

            if ($url->public == Url::P_OK && $ent->{$field} == $entOff){
                $url->public = Url::P_NO;
                $url->update(false,['public']);
            }
            if ($url->public == Url::P_NO && $ent->{$field} ==  $entOn){
                $url->public = Url::P_OK;
                $url->update(false,['public']);
            }
        }
    }



    public function afterDelete()
    {


        foreach ( UrlDomain::findAll(['url_id'=>$this->id ]) as $item){
            $item->delete();
        }


        parent::afterDelete(); // TODO: Change the autogenerated stub
    }
}